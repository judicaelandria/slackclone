scalar Date

enum Access {
  PUBLIC
  PRIVATE
}

type Mutation {
  login(input: UserInput!): UserPayload!
  register(input: RegisterUserInput!): UserPayload!
  createChannel(name: String!, access: Access!): Channel!
  sendChannelMessage(content: String!, channelId: ID!): ChannelMessage!
}

type Query {
  me: User!
  users: [User!]!
  channelMessages(channelId: String!): ChannelMessage!
  channels: [Channel!]!
  channel(channelName: String!): Channel
}

# Type

type UserPayload {
  token: String!
}

type User {
  id: ID!
  email: String!
  fullname: String!
  createdAt: Date!
  updatedAt: Date!
}

type Channel {
  id: ID!
  name: String
  createdAt: Date!
  access: String!
  members: [User!]
  messages: [ChannelMessage!]
}

type ChannelMessage {
  id: ID!
  sentBy: User
  content: String!
  channel: Channel
}

# Subscription
type Subscription {
  channelMessage(channelName: String!): Channel!
}

# Input

input RegisterUserInput {
  email: String!
  fullname: String!
  password: String!
}

input UserInput {
  email: String!
  password: String!
}
